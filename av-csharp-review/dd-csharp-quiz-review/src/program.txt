usingSystem;2)usingSystem.Collections.Generic;3)usingCSharp.Language.Quiz.Entities;4)5)namespaceCSharp.Language.Quiz6){7)publicclassProgram8){9)privatestaticRandomrnd= newRandom();10)11)publicstaticvoidMain(string[] args)12){13)Programapp= newProgram(args);14)15)app.AssignMarks(30,80);16)17)foreach(Studentperson inapp.Students)18){19)System.Console.WriteLine("Name:"+person.Name);20)foreach(EarnedMarkitem inperson.Marks)21)System.Console.WriteLine("\t"+item);22)}23)}24)25)privateList<Student> _students = newList<Student>();26)27)publicList<Student> Students28){29)get{ return_students; }30)set{ _students = value; }31)}32)33)publicProgram(string[] studentNames)34){35)WeightedMark[] CourseMarks = newWeightedMark[4];36)CourseMarks[0]= newWeightedMark("Quiz1", 20);37)CourseMarks[1] = newWeightedMark("Quiz 2", 20);38)CourseMarks[2] = newWeightedMark("Exercises", 25);39)CourseMarks[3] = newWeightedMark("Lab", 35);40)int[] possibleMarks = newint[4] {25,50,12,35};41)42)foreach(stringname instudentNames)43){44)EarnedMark[] marks = newEarnedMark[4];45)for(inti = 0; i < possibleMarks.Length; i++)46)marks[i] = newEarnedMark(CourseMarks[i], possibleMarks[i], 0);47)Students.Add(newStudent(name,marks));48)}49)}50)51)publicvoidAssignMarks(intmin, intmax)52){53)foreach(Studentperson inStudents)54)foreach(EarnedMarkitem inperson.Marks)55)item.Earned = (rnd.Next(min, max) / 100.0) * item.Possible;56)}57)}58)}59)60)namespaceCSharp.Language.Quiz.Entities61){62)publicclassStudent63){64)publicstringName { get; privateset; }65)publicEarnedMark[] Marks { get; privateset; }66)67)publicStudent(stringname, EarnedMark[] marks)
68){69)Name = name;70)Marks = marks;71)}72)}73)74)publicclassWeightedMark75){76)publicintWeight { get; privateset; }77)publicstringName { get; privateset; }78)79)publicWeightedMark(stringname, intweight)80){81)if(weight <= 0 || weight > 100)82)thrownewException("Invalid weight: must be greater than zero and at most 100");83)if(string.IsNullOrEmpty(name) || string.IsNullOrEmpty(name.Trim()))84)thrownewException("Name cannot be empty for weighted item");85)Weight = weight;86)Name = name;87)}88)}89)90)publicclassEarnedMark: WeightedMark91){92)publicintPossible { get; privateset; }93)privatedouble_Earned;94)publicdoubleEarned95){96)get{ return_Earned; }97)set98){99)if(value< 0 || value> Possible)100)thrownewException("Invalid earned mark assigned");101)_Earned = value;102)}103)}104)105)publicdoublePercent106){get{ return(Earned/ Possible) * 100; } }107)108)publicdoubleWeightedPercent109){get{ returnPercent*Weight/100; } }110)111)publicEarnedMark(WeightedMarkmarkableItem, intpossible, doubleearned)112): this(markableItem.Name, markableItem.Weight, possible, earned)113){114)}115)116)publicEarnedMark(stringname, intweight, intpossible, doubleearned)117): base(name, weight)118){119)if(possible <= 0)120)thrownewException("Invalid possible marks");121)Possible = possible;122)Earned = earned;123)}124)125)publicoverridestringToString()126){127)returnString.Format("{0} ({1})\t -{2}% ({3}/{4}) \t-Weighted Mark {5}%", 128)Name, 129)Weight, 130)Percent, 131)Earned, 132)Possible, 133)WeightedPercent);134)}135)}136)}
