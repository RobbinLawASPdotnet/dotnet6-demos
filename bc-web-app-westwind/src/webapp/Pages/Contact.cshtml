@* https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form *@
@* https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input *@
@page
@model MyApp.Namespace.ContactModel
@{
	ViewData["Title"] = "Contact";
}
<div class="container">
	<h5>Form Elements</h5>
	@* <form method="POST"> *@
	<form method="POST" novalidate>
		<div class="row g-3 mb-3">
			<div class="col-4">
				<select class="form-select" name="SelectedSubjectId">
					@for (var index = 0; index < Model.SelectListOfSubjects.Count; index++)
					{
							<option 
								value="@index" 
								selected=@(Model.SelectedSubjectId == index)
							>
							@Model.SelectListOfSubjects[index]
							</option>
					}
				</select>
			</div>
		</div>
		<div class="row g-3 mb-3">
			@* Here we use the name/value pair attributes of the
			input html element to send the data in the body
			of the post request.
			Then in the code behind the name must be in the
			parameter list of the onPost method to capture
			the string type data from the post request.
			We must convert the string data to an int in our code. *@
			<div class="col-4">
				<input type="text" class="form-control" placeholder="enter text 1" name="text1" value="@Model.Text1" />
			</div>
			<div class="col-4">
				<input type="number" class="form-control" placeholder="enter num 1" name="number1" value="@Model.Number1" />
			</div>
		</div>
		<div class="row g-3 mb-3">
			@* Here we use the name/value pair attributes of the
			input html element to send the data in the body
			of the post request.
			Then in the code behind the data is bound to
			the Text2 property automatically because of the
			[BindProperty] annotation.
			We do not need a paramenter in the onPost anymore.
			Also conversion from a string to an int automatically happens.*@
			<div class="col-4">
				<input type="text" class="form-control" placeholder="enter text 2" name="Text2" value="@Model.Text2" />
			</div>
			<div class="col-4">
				<input type="number" class="form-control" placeholder="enter num 2" name="Number2" value="@Model.Number2" />
			</div>
		</div>
		<div class="row g-3 mb-3">
			@* Here we use the Microsoft tag helper asp-for to directly bind the data to the property in the code behind.
			In the code behind we must use the [BindProperty] annotation
			above the property involved.
			We do not need a paramenter in the onPost anymore. *@
			<div class="col-4">
				<input type="text" class="form-control" placeholder="enter text 3" asp-for="Text3" />
			</div>
			<div class="col-4">
				<input type="number" class="form-control" placeholder="enter num 3" asp-for="Number3" />
			</div>
		</div>
		<div class="row g-3 mb-3">
			<div class="col-4">
				<input type="email" class="form-control" placeholder="enter your email" name="Email" value="@Model.Email" />
			</div>
			<div class="col-4">
				@if (Model.MyDate == DateTime.MinValue)
				{
					<input type="date" class="form-control" id="date" name="MyDate" value="" />
				}
				else
				{
					<input type="date" class="form-control" id="date" name="MyDate" value='@Model.MyDate.ToString("yyyy-MM-dd")' />
					@* <input type="date" class="form-control" id="date" name="MyDate" value="@Model.MyDate"/> *@
				}
			</div>
		</div>
		<div class="mb-3">
			<textarea class="form-control" 
			rows="2" cols="60" placeholder="enter your message" name="MessageBody">@Model.MessageBody
			</textarea>
		</div>
		<div class="mb-3">
				<label class="form-check-label" for="CheckBox">CheckBox:</label>
				<input type="checkbox" class="form-check-input" id="CheckBox" name="CheckBox" checked="@Model.CheckBox" />
		</div>
		<div class="mb-3">
			Communication Type?
			@foreach (var radioOption in Model.RadioOptions)
			{
				<div class="form-check">
					<input type="radio" class="form-check-input" id="Radio" 
						name="Radio" value="@radioOption" 
						checked="@(radioOption == Model.Radio)">
					<label class="form-check-label" for="Radio">
						@radioOption
					</label>
				</div>
			}
		</div>
		<div class="mb-3">
			<button type="submit" class="btn btn-dark" name="ButtonPressed" value="Submit">Submit</button>
			<button type="submit" class="btn btn-dark" name="ButtonPressed" value="Clear">Clear</button>
		</div>
	</form>
	@if(!string.IsNullOrEmpty(Model.ErrorMessage))
	{
		<p class="error-message">@Model.ErrorMessage</p>
	}

	@if(!string.IsNullOrEmpty(Model.SuccessMessage))
	{
		<p class="success-message">@Model.SuccessMessage</p>
	}
</div>